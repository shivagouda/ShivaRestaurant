//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShivaRestaurant
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RestaurantEntities : DbContext
    {
        public RestaurantEntities()
            : base("name=RestaurantEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Partybooking> Partybookings { get; set; }
        public virtual DbSet<Soup> Soups { get; set; }
        public virtual DbSet<Tablebooking> Tablebookings { get; set; }
        public virtual DbSet<Guestbook> Guestbooks { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<MenuItem> MenuItems { get; set; }
    
        public virtual int SP_InsertPartybooking(string title, string name, string email, string telephone, Nullable<System.DateTime> event_Date)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var event_DateParameter = event_Date.HasValue ?
                new ObjectParameter("Event_Date", event_Date) :
                new ObjectParameter("Event_Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertPartybooking", titleParameter, nameParameter, emailParameter, telephoneParameter, event_DateParameter);
        }
    
        public virtual int SP_InsertPartybookingOutID(string title, string name, string email, string telephone, Nullable<System.DateTime> event_Date, ObjectParameter id)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var event_DateParameter = event_Date.HasValue ?
                new ObjectParameter("Event_Date", event_Date) :
                new ObjectParameter("Event_Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertPartybookingOutID", titleParameter, nameParameter, emailParameter, telephoneParameter, event_DateParameter, id);
        }
    
        public virtual int SP_InsertTablebooking(string name, string telephone, Nullable<System.DateTime> reserve_Date, string reserve_Time, Nullable<int> persons_Count)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var reserve_DateParameter = reserve_Date.HasValue ?
                new ObjectParameter("Reserve_Date", reserve_Date) :
                new ObjectParameter("Reserve_Date", typeof(System.DateTime));
    
            var reserve_TimeParameter = reserve_Time != null ?
                new ObjectParameter("Reserve_Time", reserve_Time) :
                new ObjectParameter("Reserve_Time", typeof(string));
    
            var persons_CountParameter = persons_Count.HasValue ?
                new ObjectParameter("Persons_Count", persons_Count) :
                new ObjectParameter("Persons_Count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertTablebooking", nameParameter, telephoneParameter, reserve_DateParameter, reserve_TimeParameter, persons_CountParameter);
        }
    
        public virtual ObjectResult<SP_GetGuestMessages_Result> SP_GetGuestMessages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetGuestMessages_Result>("SP_GetGuestMessages");
        }
    
        public virtual int SP_InsertGuestMessage(string name, string guest_Message)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var guest_MessageParameter = guest_Message != null ?
                new ObjectParameter("Guest_Message", guest_Message) :
                new ObjectParameter("Guest_Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertGuestMessage", nameParameter, guest_MessageParameter);
        }
    
        public virtual ObjectResult<SP_SelectGuestMessages_Result> SP_SelectGuestMessages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectGuestMessages_Result>("SP_SelectGuestMessages");
        }
    
        public virtual int SP_InsertCategories(string cat_Name, string cat_Image_Path)
        {
            var cat_NameParameter = cat_Name != null ?
                new ObjectParameter("Cat_Name", cat_Name) :
                new ObjectParameter("Cat_Name", typeof(string));
    
            var cat_Image_PathParameter = cat_Image_Path != null ?
                new ObjectParameter("Cat_Image_Path", cat_Image_Path) :
                new ObjectParameter("Cat_Image_Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertCategories", cat_NameParameter, cat_Image_PathParameter);
        }
    
        public virtual int SP_InsertMenuItems(string item_Name, Nullable<decimal> price, string item_Image_Path, Nullable<int> categoryID)
        {
            var item_NameParameter = item_Name != null ?
                new ObjectParameter("Item_Name", item_Name) :
                new ObjectParameter("Item_Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var item_Image_PathParameter = item_Image_Path != null ?
                new ObjectParameter("Item_Image_Path", item_Image_Path) :
                new ObjectParameter("Item_Image_Path", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertMenuItems", item_NameParameter, priceParameter, item_Image_PathParameter, categoryIDParameter);
        }
    }
}
